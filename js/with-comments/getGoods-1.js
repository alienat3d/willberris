"use strict";

const getGoods = () => {
    // Метод fetch() обратился к файлу db.json и вернул ответ. Метод then отработает только тогда, когда будет известно, что все данные из базы данных полностью загрузились. Этот ответ будет в виде объекта response. Чтобы извлечь из него данные мы используем метод json() и возвращаем объект response, к которому был применён метод json(). Следующая цепь then отработает только тогда, когда все данные из объекта response будут переведены в приятный читабельный вид. И в объект data попадает уже приемлемый результат, а именно массив с данными.
    // Кстати также в response можно использовать метод text(), тогда мы получим данные не в виде объекта, а в виде строки. Но это нам здесь не подходит.
    // fetch('/db/db.json')
    //     .then(function (response) {
    //         return response.json()
    //     })
    //     .then(function (data) {
    //         console.log(data)
    //     })
    // Для компактности перепишем в стрелочные функции
     // Итак в шапке сайта есть множество категорий. Давайте реализуем функционал, что мы сможем запрашивать определённые данные по клике на каждую из категорий. Для этого запакуем метод fetch() в свою функцию, которую мы будем вызывать по клике на какую-то из категорий.
     // Также получим все ссылки из шапки при помощи "querySelectorAll". У каждой из них есть класс "navigation-link", по нему мы и получим эти ссылки.
     const links = document.querySelectorAll('.navigation-link');

     const getData = () => {
          fetch('https://willberris-eff37-default-rtdb.europe-west1.firebasedatabase.app/db.json')
              .then((res) => res.json())
              .then((data) => localStorage.setItem('goods', JSON.stringify(data)))
          // // Для того, чтобы сохранить в localStorage, нам требовалось перевести данные в строчный тип данный при помощи метода JSON.stringify()
     }
     // Переберём их все с помощью цикла и повесим на каждый из них обработчик события. Метод "forEach" аргументом принимает функцию. И эту функцию он запустит самостоятельно для каждого итерируемого элемента нашего массива.
     // Так как элементы являются ссылками, то лучше всего обращаться к event и заблокировать стандартное поведение ссылок через метод preventDefault().
     links.forEach((link) => {
          link.addEventListener('click', (event) => {
               event.preventDefault();
               getData();
          })
     })
     // Обратимся к local Storage: метод setItem для записи данных в local Storage. В виде ключ: ..., значение: .... И то и другое должно быть строками.
     // Для того чтобы перевести объект в строку, у нас есть глобальный объект JSON и у него специальный метод stringify(). И в этот метод мы передадим тот объект, который хотим сохранить.
     localStorage.setItem('goods', JSON.stringify([1, 2, 3, 4, 5]));

     // Считаем данные из local Storage с помощью метода getItem(), куда мы прописываем только ключ.
     // Чтобы его из вывода строкой развернуть в массив, надо его "спарсить" методом объекта JSON.parse().
     const goods = JSON.parse(localStorage.getItem('goods'));

     console.log(goods);

     // Чтобы удалить данные из local Storage мы пользуемся методом removeItem(). Туда передаём также ключ.
     console.log(localStorage);
     localStorage.removeItem('goods');
     console.log(localStorage); // Теперь в local Storage у нас ничего нет.
}

getGoods();